// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	logFieldNames          = builder.RawFieldNames(&Log{})
	logRows                = strings.Join(logFieldNames, ",")
	logRowsExpectAutoSet   = strings.Join(stringx.Remove(logFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	logRowsWithPlaceHolder = strings.Join(stringx.Remove(logFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLotteryLogIdPrefix = "cache:lottery:log:id:"
)

type (
	logModel interface {
		Insert(ctx context.Context, data *Log) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Log, error)
		Update(ctx context.Context, data *Log) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLogModel struct {
		sqlc.CachedConn
		table string
	}

	Log struct {
		Id        int64     `db:"id"`
		TeamId    int64     `db:"team_id"`    // 队伍id
		PickGroup string    `db:"pick_group"` // 抽取组合
		Time      time.Time `db:"time"`       // 记录时间
	}
)

func newLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLogModel {
	return &defaultLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`log`",
	}
}

func (m *defaultLogModel) Delete(ctx context.Context, id int64) error {
	lotteryLogIdKey := fmt.Sprintf("%s%v", cacheLotteryLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, lotteryLogIdKey)
	return err
}

func (m *defaultLogModel) FindOne(ctx context.Context, id int64) (*Log, error) {
	lotteryLogIdKey := fmt.Sprintf("%s%v", cacheLotteryLogIdPrefix, id)
	var resp Log
	err := m.QueryRowCtx(ctx, &resp, lotteryLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", logRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLogModel) Insert(ctx context.Context, data *Log) (sql.Result, error) {
	lotteryLogIdKey := fmt.Sprintf("%s%v", cacheLotteryLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, logRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TeamId, data.PickGroup, data.Time)
	}, lotteryLogIdKey)
	return ret, err
}

func (m *defaultLogModel) Update(ctx context.Context, data *Log) error {
	lotteryLogIdKey := fmt.Sprintf("%s%v", cacheLotteryLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, logRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TeamId, data.PickGroup, data.Time, data.Id)
	}, lotteryLogIdKey)
	return err
}

func (m *defaultLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLotteryLogIdPrefix, primary)
}

func (m *defaultLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", logRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLogModel) tableName() string {
	return m.table
}
