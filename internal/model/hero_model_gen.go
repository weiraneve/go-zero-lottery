// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	heroFieldNames          = builder.RawFieldNames(&Hero{})
	heroRows                = strings.Join(heroFieldNames, ",")
	heroRowsExpectAutoSet   = strings.Join(stringx.Remove(heroFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	heroRowsWithPlaceHolder = strings.Join(stringx.Remove(heroFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	heroModel interface {
		Insert(ctx context.Context, data *Hero) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Hero, error)
		Update(ctx context.Context, data *Hero) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHeroModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Hero struct {
		Id     int64  `db:"id"`
		Name   string `db:"name"`    // 英雄名
		Line   int64  `db:"line"`    // 英雄分路
		IsPick int64  `db:"is_pick"` // 是否被选择
	}
)

func newHeroModel(conn sqlx.SqlConn) *defaultHeroModel {
	return &defaultHeroModel{
		conn:  conn,
		table: "`hero`",
	}
}

func (m *defaultHeroModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHeroModel) FindOne(ctx context.Context, id int64) (*Hero, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", heroRows, m.table)
	var resp Hero
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHeroModel) Insert(ctx context.Context, data *Hero) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, heroRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Line, data.IsPick)
	return ret, err
}

func (m *defaultHeroModel) Update(ctx context.Context, data *Hero) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, heroRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Line, data.IsPick, data.Id)
	return err
}

func (m *defaultHeroModel) tableName() string {
	return m.table
}
